from datetime import datetime
from typing import Optional, List
from pydantic import BaseModel, EmailStr

# RawContent schemas

class RawContentBase(BaseModel):
    source: str
    title: str
    url: str
    summary: Optional[str]
    published_date: Optional[datetime]
    raw_html: Optional[str]
    status: Optional[str] = "RAW"

class RawContentCreate(RawContentBase):
    pass

class RawContentResponse(RawContentBase):
    id: int

    class Config:
        orm_mode = True


# ProcessedContent schemas

class ProcessedContentBase(BaseModel):
    raw_id: int
    formatted_content: Optional[str]
    status: Optional[str] = "PENDING_APPROVAL"

class ProcessedContentCreate(ProcessedContentBase):
    pass

class ProcessedContentResponse(ProcessedContentBase):
    id: int

    class Config:
        orm_mode = True


# NewsletterIssueHistory schemas

class NewsletterIssueHistoryBase(BaseModel):
    date_sent: Optional[datetime]
    content_ids: Optional[List[int]]
    status: Optional[str] = "SENT"

class NewsletterIssueHistoryCreate(NewsletterIssueHistoryBase):
    pass

class NewsletterIssueHistoryResponse(NewsletterIssueHistoryBase):
    id: int

    class Config:
        orm_mode = True


# Subscriber schemas

class SubscriberBase(BaseModel):
    email: EmailStr
    status: Optional[str] = "ACTIVE"

class SubscriberCreate(SubscriberBase):
    pass

class SubscriberResponse(SubscriberBase):
    id: int

    class Config:
        orm_mode = True


# Admin schemas

class AdminBase(BaseModel):
    name: str
    email: EmailStr

class AdminCreate(AdminBase):
    password: str  # plain password on input

class AdminResponse(AdminBase):
    id: int

    class Config:
        orm_mode = True
