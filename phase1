from sqlalchemy import Column, Integer, String, Text, DateTime, Enum, JSON, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database.db import Base

class RawContent(Base):
    __tablename__ = "newsletter_raw_content"

    id = Column(Integer, primary_key=True, index=True)
    source = Column(String, nullable=False)
    title = Column(String, nullable=False)
    url = Column(String, nullable=False, unique=True)
    summary = Column(Text)
    published_date = Column(DateTime, default=func.now())
    raw_html = Column(Text)
    status = Column(String, default="RAW")  # RAW, PROCESSED

    # Relationship to ProcessedContent
    processed = relationship("ProcessedContent", back_populates="raw_content", uselist=False)


class ProcessedContent(Base):
    __tablename__ = "newsletter_processed_content"

    id = Column(Integer, primary_key=True, index=True)
    raw_id = Column(Integer, ForeignKey("newsletter_raw_content.id"))
    formatted_content = Column(Text)
    status = Column(String, default="PENDING_APPROVAL")  # PENDING_APPROVAL, APPROVED, REJECTED, SENT

    # Relationship back to RawContent
    raw_content = relationship("RawContent", back_populates="processed")


class NewsletterIssueHistory(Base):
    __tablename__ = "newsletter_issue_history"

    id = Column(Integer, primary_key=True, index=True)
    date_sent = Column(DateTime, default=func.now())
    content_ids = Column(JSON)  # Stores a list of processed content IDs
    status = Column(String, default="SENT")  # e.g., SENT, FAILED


class Subscriber(Base):
    __tablename__ = "subscribers"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, nullable=False)
    status = Column(String, default="ACTIVE")  # ACTIVE, UNSUBSCRIBED


class Admin(Base):
    __tablename__ = "admins"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password_hash = Column(String, nullable=False)
